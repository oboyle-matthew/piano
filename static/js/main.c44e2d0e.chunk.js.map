{"version":3,"sources":["components/Visualizer.js","parser/XMLParser.js","components/MainView.js","new_components/FileLoader.js","App.js","serviceWorker.js","index.js"],"names":["noteToScore","scoreToColor","0","1","2","3","4","5","6","7","8","9","10","11","triangle","size","color","width","height","backgroundColor","borderStyle","borderLeftWidth","borderRightWidth","borderBottomWidth","borderLeftColor","borderRightColor","borderTopColor","borderBottomColor","circle","borderRadius","Visualizer","state","img","arr","index","filter","note","i","map","parseInt","duration","reduce","a","b","score","octave","alter","notes","Math","min","getScore","Number","isNaN","max","top","left","radius","this","style","position","text","fontSize","props","beats","beatLength","multiplier","widthRatio","incrementMultiplier","leftNotes","rightNotes","lineLength","rightMax","getMaxScore","rightMin","getMinScore","leftMax","leftMin","overflowX","marginTop","id","noteArray","floor","sumUpTo","length","topLocation","convertToVisual","handDiff","Component","get_attribute","att","querySelector","innerHTML","is_chord","get_notes","xml","querySelectorAll","right","toAddLeft","toAddRight","forEach","note_obj","type","get_note_object","push","reverse","firstMeasure","firstMeasureDuration","console","log","secondMeasure","secondMeasureDuration","measureDiff","unshift","App","barsPerLine","selectedFile","hidden","file_name","linesInPdf","prevProps","resetScreen","bars","window","innerWidth","innerHeight","setState","label","value","step","onChange","e","target","node","document","getElementById","self","domtoimage","toPng","then","src","Image","onload","pdf","jsPDF","canvas","createElement","getContext","drawImage","splitImage","toDataURL","addImage","addPage","save","catch","error","Menu","BurgerMenu","sliders","marginLeft","textAlign","createSlider","marginBottom","onClick","takeScreenshot","zIndex","styles","bmBurgerButton","bmBurgerBars","background","bmCrossButton","bmCross","bmMenu","padding","bmMorphShape","fill","bmItemList","bmOverlay","noOverlay","pageWrapId","outerContainerId","handleSelectedFile","event","files","handleFileRead","fileReader","updateNotes","DOMParser","parseFromString","result","name","FileReader","onloadend","readAsText","display","flexDirection","handleUpload","setNotes","bind","FileLoader","MainView","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c44e2d0e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nconst noteToScore = {\"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11};\nconst scoreToColor = {0: \"red\", 1: \"black\", 2: \"pink\", 3: \"purple\", 4: \"green\", 5: \"cyan\", 6: \"orange\",\n    7: \"blue\", 8: \"grey\", 9: \"yellow\", 10: \"navy\", 11: \"brown\"};\nconst triangle = (size, color) => {\n    return {\n        width: 0,\n        height: 0,\n        backgroundColor: 'transparent',\n        borderStyle: 'solid',\n        borderLeftWidth: size * 1,\n        borderRightWidth: size * 1,\n        borderBottomWidth: size * 2,\n        borderLeftColor: 'transparent',\n        borderRightColor: 'transparent',\n        borderTopColor: 'transparent',\n        borderBottomColor: color\n    };\n};\n\nconst circle = (size, color) => {\n    return {\n        width: size * 2,\n        height: size * 2,\n        borderRadius: size * 2,\n        backgroundColor: color\n    };\n};\n\nclass Visualizer extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            img: null\n        }\n    }\n\n    sumUpTo(arr, index) {\n        return arr.filter((note, i) => i < index).map(note => parseInt(note[0].duration)).reduce((a, b) => a + b, 0);\n    }\n\n    getScore(note) {\n        let score = note.octave * 12 + noteToScore[note.note];\n        return note.alter ? score + parseInt(note.alter) : score;\n    }\n\n    getMinScore(notes) {\n        return Math.min(...notes.map(note => this.getScore(note[0])).filter(note => !Number.isNaN(note)));\n    }\n\n    getMaxScore(notes) {\n        return Math.max(...notes.map(note => this.getScore(note[0])).filter(note => !Number.isNaN(note)));\n    }\n\n    convertToVisual(note, top, left, width, radius) {\n        const color = scoreToColor[this.getScore(note) % 12];\n        if (note.octave === '4') {\n            return <div style={{position: 'absolute', width: width, top: top, left: left} }>\n                <div style={circle(radius, color)}/>\n            </div>\n        } else if (note.octave === '5') {\n            return <div style={{position: 'absolute', width: width, top: top, left: left }}>\n                <div style={triangle(radius, color)}/>\n            </div>\n        }\n        else {\n            let text = note.note;\n            if (note.alter === '1') {\n                text += \"#\"\n            } else if (note.alter === '-1') {\n                text += 'b'\n            }\n            return <div style={{position: 'absolute', width: width, height: radius*2, top: top, left: left, fontSize: radius*2}}>\n                {text}\n            </div>\n        }\n    }\n\n    render() {\n        const {beats, beatLength, multiplier, height, widthRatio, incrementMultiplier, leftNotes, rightNotes, radius} = this.props;\n        const lineLength = beats * beatLength * multiplier;\n        const rightMax = this.getMaxScore(rightNotes);\n        const rightMin = this.getMinScore(rightNotes);\n        const leftMax = this.getMaxScore(leftNotes);\n        const leftMin = this.getMinScore(leftNotes);\n\n        return (\n            <div style={{width: lineLength, overflowX: 'none', marginTop: 50}}>\n                <div id=\"capture\" >\n                    <div style={{position: 'relative'}}>\n                        {rightNotes.map((noteArray, i) => {\n                            let top = (height * Math.floor(this.sumUpTo(rightNotes, i) / lineLength));\n                            if (noteArray.length === 1) {\n                                top += (1 - ((this.getScore(noteArray[0]) - rightMin) / (rightMax - rightMin))) * incrementMultiplier;\n                            }\n                            let left = widthRatio * (this.sumUpTo(rightNotes, i) % lineLength);\n                            const width = noteArray[0].duration * widthRatio;\n                            return <div>\n                                {noteArray.map((note, i) => {\n                                    let topLocation = top + ((i / noteArray.length) * incrementMultiplier);\n                                    return this.convertToVisual(note, topLocation, left, width, radius / noteArray.length);\n                                })}\n                            </div>;\n                        })}\n                    </div>\n                    <div style={{position: 'relative'}}>\n                        {leftNotes.map((noteArray, i) => {\n                            let top = this.props.handDiff + (height * Math.floor(this.sumUpTo(leftNotes, i) / lineLength));\n                            if (noteArray.length === 1) {\n                                top += (1 - ((this.getScore(noteArray[0]) - leftMin) / (leftMax - leftMin))) * incrementMultiplier;\n                            }\n                            let left = widthRatio * (this.sumUpTo(leftNotes, i) % lineLength);\n                            const width = noteArray.duration * widthRatio;\n                            return <div>\n                                {noteArray.map((note, i) => {\n                                    let topLocation = top + ((i / noteArray.length) * incrementMultiplier);\n                                    return this.convertToVisual(note, topLocation, left, width, radius / noteArray.length);\n                                })}\n                            </div>;\n                        })}\n                    </div>\n                    <div style={{position: 'relative'}}>\n                        {rightNotes.map((note, i) => {\n                            note = note[0];\n                            let top = (height * Math.floor(this.sumUpTo(rightNotes, i) / lineLength));\n                            top -= this.props.radius;\n                            return <hr style={{position: 'absolute', top: top, left: 0, width: lineLength*widthRatio}}/>\n                        })}\n                    </div>\n                </div>\n                <div id={\"test\"}> </div>\n            </div>\n        );\n    }\n}\n\nexport default Visualizer;\n","function get_attribute(note, att) {\n    return note.querySelector(att) === null ? null : note.querySelector(att).innerHTML;\n}\n\nfunction is_chord(note) {\n    return note.querySelector('chord') !== null;\n}\n\nfunction get_note_object(note) {\n    return {\n        note: get_attribute(note, 'step'),\n        octave: get_attribute(note, 'octave'),\n        alter: get_attribute(note, 'alter'),\n        duration: get_attribute(note, 'duration'),\n        type: get_attribute(note, 'type')\n    }\n}\n\nexport default function get_notes(xml) {\n    let notes = xml.querySelectorAll(\"note\");\n    if (xml.querySelectorAll('score-part').length > 2) {\n        notes = xml.querySelectorAll('part')[0].querySelectorAll('note');\n    }\n    let left = [];\n    let right = [];\n    let toAddLeft = [];\n    let toAddRight = [];\n    notes.forEach(note => {\n        const note_obj = get_note_object(note);\n        if (get_attribute(note, 'staff') === '2') {\n            if (!is_chord(note) && toAddLeft.length > 0) {\n                left.push(toAddLeft.reverse());\n                toAddLeft = [];\n            }\n            toAddLeft.push(note_obj);\n        } else {\n            if (!is_chord(note) && toAddRight.length > 0) {\n                right.push(toAddRight.reverse());\n                toAddRight = [];\n            }\n            toAddRight.push(note_obj);\n        }\n    })\n    const beats = xml.querySelector(\"beats\").innerHTML;\n    const firstMeasure = xml.querySelector(\"measure\");\n    let firstMeasureDuration = 0;\n    firstMeasure.querySelectorAll('note').forEach(note => {\n        if (!note.querySelector('chord') && (!note.querySelector('staff') || note.querySelector('staff').innerHTML === '1')) {\n            console.log(note.innerHTML);\n            firstMeasureDuration += parseInt(note.querySelector('duration').innerHTML);\n        }\n    });\n    const secondMeasure = xml.querySelectorAll(\"measure\")[xml.querySelectorAll(\"measure\").length > 1 ? 1 : 0];\n    let secondMeasureDuration = 0;\n    secondMeasure.querySelectorAll('note').forEach(note => {\n        if (!note.querySelector('chord') && (!note.querySelector('staff') || note.querySelector('staff').innerHTML === '1')) {\n            console.log(note.innerHTML);\n            secondMeasureDuration += parseInt(note.querySelector('duration').innerHTML);\n        }\n    });\n    const measureDiff = secondMeasureDuration - firstMeasureDuration;\n    if (measureDiff > 0) {\n        left.unshift([{note: null, octave: null, alter: null, duration: measureDiff, type: null }])\n        right.unshift([{note: null, octave: null, alter: null, duration: measureDiff, type: null }])\n    }\n    return {left: left, right: right, beats: beats, beatLength: secondMeasureDuration / beats};\n}\n\nfunction getInfo(file) {\n    const reader = new FileReader();\n\n    reader.readAsText(file);\n    return new Promise(resolve => {\n        reader.onloadend = (evt) => {\n            const readerData = evt.target.result;\n\n            const parser = new DOMParser();\n            const xml = parser.parseFromString(readerData, 'text/xml');\n            const notes = get_notes(xml);\n\n            resolve(notes);\n        };\n    });\n\n\n}","import React, { Component } from 'react';\nimport Visualizer from './Visualizer';\nimport BurgerMenu from 'react-burger-menu';\nimport { List, ListItem } from 'react-mdl';\nimport domtoimage from \"dom-to-image\";\nimport jsPDF from \"jspdf\";\nimport getInfo from '../parser/XMLParser';\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            beats: 4,\n            beatLength: 64,\n            radius: 20,\n            height: 320,\n            widthRatio: 2,\n            barsPerLine: 2,\n            incrementMultiplier: 100,\n            handDiff: 250,\n            selectedFile: null,\n            left: [],\n            right: [],\n            hidden: true,\n            file_name: '',\n            linesInPdf: 3,\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps !== this.props) {\n            this.resetScreen();\n        }\n    }\n\n    resetScreen() {\n        const { beats, beatLength } = this.props;\n        const bars = window.innerWidth < 800 ? 1 : 2;\n        const width = window.innerWidth / (beats * beatLength * bars);\n        const radius = window.innerWidth / (beats * bars * 8);\n        const height = window.innerHeight / 2;\n        this.setState({\n            widthRatio: width,\n            barsPerLine: bars,\n            radius: radius,\n            height: height,\n            incrementMultiplier: 100,\n            handDiff: height * 0.35,\n            linesInPdf: 3,\n            beatLength: beatLength,\n        });\n    }\n\n    createSlider(label, value, min, max, step) {\n        return (\n            <ListItem>\n                <label>{label}\n                    <input type=\"range\" min={min} max={max} step={step} value={this.state[value]}\n                           onChange={e => this.setState({[value]: e.target.value})} />\n\n                </label>\n            </ListItem>\n        )\n    }\n\n    takeScreenshot() {\n        const node = document.getElementById('capture');\n        const self = this;\n        domtoimage.toPng(node)\n            .then(src => {\n                var img = new Image();\n                img.src = src;\n                img.onload = function() {\n                    const width = img.width;\n                    const height = self.state.height * self.state.linesInPdf;\n                    const pdf = new jsPDF(\"l\", \"mm\", \"a4\");\n                    for (var i = 0; i < img.height / height; i++) {\n                        var canvas = document.createElement('canvas');\n                        canvas.width = width;\n                        canvas.height = height;\n                        var context = canvas.getContext('2d');\n                        context.drawImage(img, 0, height*i, width, height, 0, 0, width, height);\n                        let splitImage = new Image();\n                        splitImage.src = canvas.toDataURL();\n                        pdf.addImage(splitImage, 'png', 10, 10, 280, 202);  // 180x150 mm @ (10,10)mm\n                        if (i+1 < img.height/height) {\n                            pdf.addPage();\n                        }\n                    }\n                    console.log(self.props.file_name);\n                    pdf.save(self.props.file_name + '.pdf');\n                }\n\n            })\n            .catch(function (error) {\n                console.error('oops, something went wrong!', error);\n            });\n\n    }\n\n    render() {\n        const Menu = BurgerMenu['slide'];\n        const styles = {\n            bmBurgerButton: {\n                position: 'absolute',\n                width: '36px',\n                height: '30px',\n                left: '24px',\n                top: '24px'\n            },\n            bmBurgerBars: {\n                background: '#373a47'\n            },\n            bmCrossButton: {\n                height: '24px',\n                width: '24px'\n            },\n            bmCross: {\n                background: '#bdc3c7'\n            },\n            bmMenu: {\n                background: '#373a47',\n                padding: '2.5em 1.5em 0',\n                fontSize: '1.15em'\n            },\n            bmMorphShape: {\n                fill: '#373a47'\n            },\n            bmItemList: {\n                color: '#b8b7ad',\n                padding: '0.8em'\n            },\n            bmOverlay: {\n                background: 'rgba(0, 0, 0, 0.3)'\n            }\n        };\n        const { left, right, beats } = this.props;\n        const {radius, height, widthRatio, barsPerLine, incrementMultiplier, handDiff, file_name, beatLength} = this.state;\n        console.log(widthRatio);\n        const sliders = <div>\n            <h1 style={{ width: '150%', marginLeft: '-30%', textAlign: 'center'}}>Customize notes:</h1>\n            {this.createSlider(\"Size of Notes\", 'radius', 5, 50, 1)}\n            {this.createSlider(\"Gap between hands\", 'handDiff', 20, 300, 1)}\n            {this.createSlider(\"Line Height\", 'height', 100, 1000, 1)}\n            {this.createSlider(\"Line Width\", 'widthRatio', 0, 10, 0.1)}\n            {this.createSlider(\"Bars per line\", 'barsPerLine', 1, 5, 1)}\n            {this.createSlider(\"Pitch Difference\", 'incrementMultiplier', 0, 300, 1)}\n            <button style={{marginLeft: '15%', marginTop: '10%', marginBottom: '25%'}} onClick={() => this.resetScreen()}>Reset sizes</button>\n            <h1 style={{ width: '150%', marginLeft: '-30%', textAlign: 'center'}}>Download:</h1>\n            {this.createSlider(\"Lines per page in pdf\", 'linesInPdf', 1, 7, 1)}\n            <button style={{marginLeft: '12%', marginTop: '10%'}} onClick={() => this.takeScreenshot()}>Download music</button>\n\n        </div>;\n        return (\n                <div id=\"outer-container\" style={{height: '90%', position: 'absolute', top: 0, left: 0, zIndex: -2}}>\n                    <Menu\n                        styles={styles}\n                        noOverlay id={'slide'}\n                        pageWrapId={'page-wrap'}\n                        outerContainerId={'outer-container'}\n                    >\n                        <List>\n                            {sliders}\n                        </List>\n                    </Menu>\n                    <div id=\"page-wrap\" >\n                        <Visualizer style={{zIndex: -1}} beats={beats} beatLength={beatLength}\n                                    multiplier={barsPerLine} incrementMultiplier={incrementMultiplier}\n                                    handDiff={parseInt(handDiff)} radius={radius}\n                                    height={parseInt(height)} widthRatio={widthRatio}\n                                    rightNotes={right} leftNotes={left} file_name={file_name}\n                        />\n                    </div>\n\n\n\n                </div>\n\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport get_notes from \"../parser/XMLParser\";\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            selectedFile: null,\n        };\n    }\n\n    handleSelectedFile = event => {\n        this.setState({\n            selectedFile: event.target.files[0],\n        })\n    };\n\n    handleFileRead = (fileReader) => {\n        const { selectedFile } = this.state;\n        const { updateNotes } = this.props;\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(fileReader.target.result,\"text/xml\");\n        const notes = get_notes(xmlDoc);\n        updateNotes && updateNotes(notes, selectedFile.name);\n    };\n\n    async handleUpload() {\n        let { selectedFile } = this.state;\n        const fileReader = new FileReader();\n        fileReader.onloadend = this.handleFileRead;\n        fileReader.readAsText(selectedFile);\n    };\n\n    render() {\n        return (\n            <div>\n                <div style={{marginLeft: \"20%\", display: 'flex', flexDirection: 'row'}}>\n                    <input style={{width: '20%'}} type=\"file\" name=\"\" id=\"\" onChange={this.handleSelectedFile} />\n                    <div style={{width: '20%'}}>\n                        <button  onClick={() => this.handleUpload()}>Upload</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './App.css'\nimport MainView from './components/MainView';\nimport FileLoader from './new_components/FileLoader';\n\n//Here's a comment from test branch\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            left: [],\n            right: [],\n            beats: 4,\n            name: '',\n            beatLength: 64,\n        };\n        this.setNotes = this.setNotes.bind(this);\n    }\n\n    normalizeNotes(notes) {\n\n    }\n\n    setNotes(notes, name) {\n        this.setState({left: notes.left, right: notes.right, beats: notes.beats, name: name, beatLength: notes.beatLength})\n    }\n    \n  render() {\n    const { left, right, beats, beatLength, name } = this.state;\n    return (\n        <div>\n            <FileLoader updateNotes={this.setNotes} />\n            <MainView file_name={name} left={left} right={right} beats={beats} beatLength={beatLength} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}